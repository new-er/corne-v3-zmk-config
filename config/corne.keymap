/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        hm: home_row_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <13 22>;
            layers = <0 1 2>;
        };

        linux_compose_key {
            bindings = <&kp CAPS>;
            key-positions = <29 30>;
            layers = <0>;
        };

        bootloader_left {
            bindings = <&bootloader>;
            key-positions = <24 5>;
            layers = <0>;
        };

        alt_code_vowel_a {
            bindings = <&alt_code_vowel_a>;
            key-positions = <39 14>;
            layers = <0>;
        };

        alt_code_vowel_u {
            bindings = <&alt_code_vowel_mutation_u>;
            key-positions = <38 7>;
            layers = <0>;
        };

        alt_code_vowel_o {
            bindings = <&alt_code_vowel_mutation_o>;
            key-positions = <38 9>;
            layers = <0>;
        };

        alt_code_vowel_cap_a {
            bindings = <&alt_code_vowel_cap_a>;
            key-positions = <39 14 22>;
            layers = <0>;
        };

        alt_code_vowel_cap_u {
            bindings = <&alt_code_vowel_mutation_cap_u>;
            key-positions = <38 7 13>;
            layers = <0>;
        };

        alt_code_vowel_cap_o {
            bindings = <&alt_code_vowel_mutation_cap_o>;
            key-positions = <38 9 13>;
            layers = <0>;
        };

        alt_code_euro {
            bindings = <&alt_code_euro_symbol>;
            key-positions = <39 3>;
            layers = <0>;
        };

        vowel_mutation_s {
            bindings = <&alt_code_vowel_mutation_s>;
            key-positions = <14 39>;
        };
    };

    macros {
        alt_code_vowel_a: alt_code_vowel_a {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_NUMBER_2 &kp KP_N2 &kp KP_NUMBER_8>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_CODE_VOWEL_A";
        };

        alt_code_vowel_mutation_o: alt_code_vowel_mutation_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_NUMBER_2 &kp KP_N4 &kp KP_N6>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_CODE_VOWEL_MUTATION_O";
        };

        alt_code_vowel_mutation_u: alt_code_vowel_mutation_u {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_NUMBER_2 &kp KP_N5 &kp KP_N2>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_CODE_VOWEL_MUTATION_U";
        };

        alt_code_vowel_mutation_s: alt_code_vowel_mutation_s {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_NUMBER_2 &kp KP_N2 &kp KP_N3>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_CODE_VOWEL_MUTATION_S";
        };

        alt_code_vowel_cap_a: alt_code_vowel_cap_a {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N6>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_CODE_VOWEL_CAP_A";
        };

        alt_code_vowel_mutation_cap_o: alt_code_vowel_mutation_cap_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N3>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_CODE_VOWEL_MUTATION_CAP_O";
        };

        alt_code_vowel_mutation_cap_u: alt_code_vowel_mutation_cap_u {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_NUMBER_2 &kp KP_N2 &kp KP_N0>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_CODE_VOWEL_MUTATION_CAP_U";
        };

        alt_code_euro_symbol: alt_code_euro_symbol {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_N1 &kp KP_N2 &kp KP_N8>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_CODE_EURO_SYMBOL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB     &kp Q             &kp W        &kp E          &kp R           &kp T    &kp Y  &kp U            &kp I       &kp O        &kp P            &kp BACKSLASH
&kp ESCAPE  &hm LEFT_SHIFT A  &hm LCTRL S  &hm LGUI D     &hm LEFT_ALT F  &kp G    &kp H  &hm RIGHT_ALT J  &hm RGUI K  &hm RCTRL L  &hm RSHIFT SEMI  &kp SQT
&kp GRAVE   &kp Z             &kp X        &kp C          &kp V           &kp B    &kp N  &kp M            &kp COMMA   &kp DOT      &kp FSLH         &mo 3
                                           &kp BACKSPACE  &kp DEL         &mo 1    &mo 2  &kp ENTER        &kp SPACE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp EQUAL  &mt F1 N1  &mt F2 N2  &mt F3 N3  &mt F4 N4  &mt F5 N5    &mt F6 N6  &mt F7 N7                 &mt F8 N8          &mt F9 N9                &mt F10 N0                 &kp MINUS
&trans     &trans     &trans     &trans     &trans     &trans       &kp LEFT   &hm RIGHT_ALT DOWN_ARROW  &hm RGUI UP_ARROW  &hm RIGHT_CONTROL RIGHT  &hm RIGHT_SHIFT SEMICOLON  &trans
&trans     &trans     &trans     &trans     &trans     &trans       &trans     &trans                    &trans             &trans                   &trans                     &trans
                                 &kp LGUI   &trans     &kp SPACE    &kp RET    &trans                    &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK      &kp LPAR          &kp RPAR           &kp BSPC
&trans   &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp BACKSLASH  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp GRAVE
&trans   &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp PIPE       &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp TILDE
                           &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        magic {
            bindings = <
&sys_reset  &trans        &trans        &trans        &trans        &bootloader     &bootloader  &trans          &kp C_VOLUME_UP    &trans      &trans  &sys_reset
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans       &kp C_PREVIOUS  &kp C_PLAY_PAUSE   &kp C_NEXT  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &out OUT_TOG    &trans       &trans          &kp C_VOLUME_DOWN  &trans      &trans  &trans
                                        &trans        &trans        &trans          &trans       &trans          &trans
            >;
        };
    };
};
